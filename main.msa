*:/rank [$] = >>>
    include('util.ms')
    @args = parse_args($)
    if(array_size(@args) == 0) {
        @args[0] = 'nil'
    }

    proc(_args_count, @args, @num, @correct,
        if(array_size(@args) != @num) {
            die(_format('Incorrect usage. Use:' @correct, 'error'))
        }
    )

    # /rank
    if(@args[0] == 'nil') {
        if(player() == '~console') {
            die(_format('Player Context Required.', 'error'))
        }
        @joined = _get_time('join')
        @play = _get_time('play')
        @play += time() - @joined
        _store_time('play', @play)
        _store_time('join', time())
        @total = _get_time('total')
        _rankUp()
        msg(_format('You have played for' _format_time(@play), 'notification'))
        if(_get_time('bonus') != 0) { 
            die(_format('You have a total ranktime of' _format_time(@total), 'notification'))
        }

    # /rank bonus add/remove [amount] [player]
    } else if(array_index_exists(@args, 1) && (@args[1] == 'add' || @args[1] == 'remove' || @args[1] == 'set') && @args[0] == 'bonus') {
        _args_count(@args, 4, '/rank bonus' @args[1] '<amount> <player>')
        if(!_perm('add')) {
            die(_format('You don\'t have permission to use /rank' @args[1], 'error'))
        }

        if(!is_integral(@args[2])) {
            die(_format('Incorrect amount of time:' @args[2], 'error'))
        }

        try(
            @p = player(@args[3]),
            die(_format('That player is not online:' @args[3], 'error'))
        )

        @joined = _get_time('join', @p)
        @play = _get_time('play', @p)
        @bonus = _get_time('bonus', @p)


        @play += time() - @joined
        if(@args[1] == 'add') {
            @bonus += @args[2] * 1000
        } else if(@args[1] == 'remove') {
            @bonus -= @args[2] * 1000
        } else if(@args[1] == 'set') {
            @bonus = @args[2] * 1000
        }

        _store_time('join', time(), @p)
        _store_time('play', @play, @p)
        _store_time('bonus', @bonus, @p)

        _rankUp(@p)
        if(@args[1] == 'add') {
            die(_format('You added' _format_time(@args[2] * 1000). 'to' @p. '\'s bonus time.' @p 'now has' _format_time(@play + @bonus). 'total time.', 'notification'))
        } else if(@args[1] == 'remove') {
            die(_format('You removed' _format_time(@args[2] * 1000). 'from' @p. '\'s bonus time.' @p 'now has' _format_time(@play + @bonus). 'total time.', 'notification'))
        } else if(@args[1] == 'set') {
            die(_format('You set' @p 'bonus time to' _format_time(@args[2] * 1000). '.' @p 'now has' _format_time(@play + @bonus). 'total time', notification))
        }

        # /rank check
    } else if(@args[0] == 'check' && array_index_exists(@args, 2) && (@args[2] == 'bonus' || @args[2] == 'play')) {
        _args_count(@args, 3, '/rank check <player> <bonus/play>')
        if(!_perm('check')) {
            die(_format('You don\'t have permission to use /rank check', 'error'))
        }

        try(
            @p = player(@args[1]),
            @p = @args[1]
        )

        if(@args[2] == bonus) {
            if(!_has_time('bonus', @p) || _get_time('bonus', @p) == 0) {
                die(_format('Player' @p 'doesnt have bonus-time.', 'error'))
            }
            @time = _get_time('bonus', @p)
        } else {
            if(!_has_time('play', @p) || _get_time('play', @p) == 0) {
                die(_format('Player' @p 'doesnt have play-time.', 'error'))
            }
            @time = _get_time('play', @p)
        }

        die(_format(@p 'has' _format_time(@time). 'of' @args[2]. '-time', 'notification'))
    }
<<<